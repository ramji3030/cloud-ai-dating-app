openapi: 3.0.3
info:
  title: Cloud AI Dating App API
  description: |
    A comprehensive RESTful API for the Cloud AI Dating App, providing endpoints for user management, authentication, matchmaking, and more.
    
    ## Features
    - JWT-based authentication
    - User profile management
    - AI-powered matchmaking
    - Real-time messaging
    - Content moderation
    
    ## Base URL
    - Development: `http://localhost:3000/api/v1`
    - Production: `https://api.cloudaidating.com/v1`
  version: 1.0.0
  contact:
    name: Cloud AI Dating Team
    email: api@cloudaidating.com
    url: https://github.com/ramji3030/cloud-ai-dating-app
  license:
    name: MIT
    url: https://github.com/ramji3030/cloud-ai-dating-app/blob/main/LICENSE

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.cloudaidating.com/v1
    description: Production server

paths:
  # Authentication Endpoints
  /auth/signup:
    post:
      summary: User Registration
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignupRequest'
            example:
              email: user@example.com
              password: SecurePass123!
              firstName: John
              lastName: Doe
              dateOfBirth: "1990-01-15"
              gender: male
              location:
                city: San Francisco
                state: CA
                country: US
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            example:
              email: user@example.com
              password: SecurePass123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh Access Token
      description: Generate new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Valid refresh token
              required:
                - refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token

  # User Profile Endpoints
  /users/profile:
    get:
      summary: Get User Profile
      description: Retrieve the authenticated user's profile
      tags:
        - User Profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

    put:
      summary: Update User Profile
      description: Update the authenticated user's profile
      tags:
        - User Profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # Authentication Schemas
    UserSignupRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - dateOfBirth
        - gender
      properties:
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          example: user@example.com
        password:
          type: string
          minLength: 8
          description: Strong password (min 8 chars, must include uppercase, lowercase, number, special char)
          example: SecurePass123!
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's first name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: User's last name
          example: Doe
        dateOfBirth:
          type: string
          format: date
          description: User's date of birth (must be 18+)
          example: "1990-01-15"
        gender:
          type: string
          enum: [male, female, non-binary, other]
          description: User's gender identity
          example: male
        location:
          $ref: '#/components/schemas/Location'
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'
          description: Optional phone number in E.164 format
          example: "+14155552671"

    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        password:
          type: string
          description: User's password
          example: SecurePass123!

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Authentication successful"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/UserProfile'
            tokens:
              $ref: '#/components/schemas/TokenResponse'

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (expires in 15 minutes)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: Refresh token (expires in 7 days)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: number
          description: Access token expiration time in seconds
          example: 900

    # User Profile Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: 64f5a1b2c3d4e5f6789012ab
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        dateOfBirth:
          type: string
          format: date
          example: "1990-01-15"
        age:
          type: number
          description: Calculated age based on date of birth
          example: 34
        gender:
          type: string
          enum: [male, female, non-binary, other]
          example: male
        location:
          $ref: '#/components/schemas/Location'
        profilePictures:
          type: array
          items:
            type: string
            format: uri
          description: Array of profile picture URLs
          example: ["https://s3.amazonaws.com/bucket/user-photos/photo1.jpg"]
        bio:
          type: string
          maxLength: 500
          description: User's biography
          example: "Love hiking, coffee, and good conversations!"
        interests:
          type: array
          items:
            type: string
          description: User's interests/hobbies
          example: ["hiking", "coffee", "photography", "traveling"]
        occupation:
          type: string
          maxLength: 100
          example: "Software Engineer"
        education:
          type: string
          maxLength: 100
          example: "Bachelor's in Computer Science"
        isEmailVerified:
          type: boolean
          example: true
        isProfileComplete:
          type: boolean
          description: Whether user has completed their profile setup
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T14:45:00Z"
        lastActive:
          type: string
          format: date-time
          description: When user was last active
          example: "2024-01-22T09:15:00Z"

    UserProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        interests:
          type: array
          items:
            type: string
          maxItems: 20
        occupation:
          type: string
          maxLength: 100
        education:
          type: string
          maxLength: 100
        location:
          $ref: '#/components/schemas/Location'
        phoneNumber:
          type: string
          pattern: '^\+[1-9]\d{1,14}$'

    # Supporting Schemas
    Location:
      type: object
      required:
        - city
        - state
        - country
      properties:
        city:
          type: string
          description: City name
          example: San Francisco
        state:
          type: string
          description: State/Province code
          example: CA
        country:
          type: string
          description: Country code (ISO 3166-1 alpha-2)
          example: US
        latitude:
          type: number
          format: float
          minimum: -90
          maximum: 90
          description: Latitude coordinate
          example: 37.7749
        longitude:
          type: number
          format: float
          minimum: -180
          maximum: 180
          description: Longitude coordinate
          example: -122.4194

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "Validation failed"
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "VALIDATION_ERROR"
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email is required"
              description: Detailed validation errors
        timestamp:
          type: string
          format: date-time
          example: "2024-01-22T10:30:00Z"
        path:
          type: string
          description: API endpoint path
          example: "/api/v1/auth/signup"

tags:
  - name: Authentication
    description: User authentication and session management
  - name: User Profile
    description: User profile management and settings
  - name: Matchmaking
    description: AI-powered matching and recommendations
  - name: Messaging
    description: Real-time chat and messaging
  - name: Admin
    description: Administrative endpoints (admin access required)

externalDocs:
  description: Find more info about the Cloud AI Dating App
  url: https://github.com/ramji3030/cloud-ai-dating-app
